package dev.lpa.Test;

// 174ページ
// テスターでなくてもテストはソフトウェアエンジニアにとって重要な仕事なので読み飛ばさないください。
// ユーザのふるまいやデータの入出力に都合の良い仮定を置くのは絶対にやめてください。不適切な使用を予測し、考慮してください。
// 全体像の理解、部品がどのように組み合わさっているか、系統化（系統立てて問題に取り組めるか。思いつきではなく、処理を系統化して、各々でテストする）

import java.util.Arrays;

public class TestBasis {


    public static void main(String[] args) {
        testThreeSorted();
    }

    // 現実の物体のテスト
    public class TestClip {

        // ステップ立てて、仮説を置く。（前のステップによって後のステップも変わる）
        // step1 誰がどのように使うか(会社の事務員が書類を束ねる？芸術家が折り曲げて作品を作る？その両方かもしれません。)
        // step2 限度は(50枚はさむ。360度以上おり曲がらない？)
        // step3 使う場所や環境は(気温、天気)
        // step4 負荷/不具合の条件(洗濯機の場合、何枚入れると完全に綺麗にならないか。大きな不具合でも水漏れや火災になることではありません。)
        // step5 どうやってテストするか(イスの耐久期間をテストする場合、実際に家で椅子を使うようなことはしないでしょうか。普通を定義する(一年間に何回、座るか。))
        // 自動 vs 手動
        // ブラックボックス vs ホワイトボックス

        // 通常は手動テストの手順が必要不可欠になる
    }

    // 関数のテスト
    // 特殊なケースをどう扱うか考慮する
    public static void testThreeSorted() {
        // step1 テストケースの定義する
        // 通常のケース: 配列のサイズ（奇数、偶数）
        // 極端なケース: 要素が1つ
        // Nullと不正な入力値: 数字以外
        // 変わった入力値: ソート済みの配列または逆ソート済みの配列を受けとる

        // step2 予期される結果(期待値)を定義する
        // 多くの場合、正しい入出力のことを指します。
        // 別の部分も確認する。ソート関数の場合、元の配列が変更されているか。

        // step3 テストコードを書く
        int[] array = {3, 1, 2};
        Arrays.sort(array);

        // -eaはJavaプログラム実行時にアサーション（assert文）を有効にするオプションです。
        // 通常、assertは無効ですが、-ea（または-enableassertions）を付けて実行すると有効になります。
        // javac dev/lpa/Test/TestBasis.java
        // java -ea dev.lpa.Test.TestBasis
        assert array[0] == 1;
        assert array[1] == 2;
        assert array[2] == 3;
        // assert array[2] == 5;
    }
}

