package dev.lpa;

//
// 時間計算量
//
// sサイズの電子ファイルを送ることを考えた場合に
// メールで送信する場合はO(s)である。なぜならファイルのサイズによって計算に「時間」がかかるためである
// 空輸する場合はO(1)である。なぜならファイルのサイズに関わらず一定の時間で送ることができるためである

//
// 空間計算量
//
// n * n の二次元配列は O(n^2)のメモリ空間が必要、一般的にforループをネストすると空間計算量の効率が落ちる
// 再帰でn回呼ばれる関数は大体O(n)になる
// しかしn回呼ばれる場合はO(n)というわけでない。forループの中で、ある機能（例: 隣どおし足し合わせる）を提供する関数を処理する場合はO(1)です。
// なぜなら、ある機能はforループ内で同時に呼び出されることはないからです。つまりメモリ領域としてはforループのO(1)となるわけです。

public class BigO {

    static int callStack = 1;

    public static void main(String[] args) {
        System.out.println("Total : " + sum(5));
    }

    static int sum(int n) {
        System.out.println("コールスタックに " + callStack + " 積まれました。 " + "n は " + n + " です。");
        if (n <= 0) {
            return 0;
        }
        callStack++;
        return n + sum(n-1); // 呼び出しごとにコールスタックに積まれる。つまり実際のメモリを消費します。
    }
}

